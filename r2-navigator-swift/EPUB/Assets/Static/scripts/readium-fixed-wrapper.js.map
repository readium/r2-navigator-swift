{"version":3,"file":"readium-fixed-wrapper.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,+BAA+B;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA","sources":["webpack://readium-js/./src/index-fixed-wrapper.js"],"sourcesContent":["//\n//  Copyright 2021 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n\n// Script used for the wrapper HTML pages of fixed layouts resources.\n\nwindow.FixedPage = function (iframeId) {\n  // Fixed dimensions for the page, extracted from the viewport meta tag.\n  var _pageSize = null;\n  // Available viewport size to fill with the resource.\n  var _viewportSize = null;\n  // Margins that should not overlap the content.\n  var _safeAreaInsets = null;\n\n  // iFrame containing the page.\n  var _iframe = document.getElementById(iframeId);\n  _iframe.addEventListener(\"load\", loadPageSize);\n\n  // Viewport element containing the iFrame.\n  var _viewport = _iframe.closest(\".viewport\");\n\n  // Parses the page size from the viewport meta tag of the loaded resource.\n  function loadPageSize() {\n    var viewport = _iframe.contentWindow.document.querySelector(\n      \"meta[name=viewport]\"\n    );\n    if (!viewport) {\n      return;\n    }\n    var regex = /(\\w+) *= *([^\\s,]+)/g;\n    var properties = {};\n    var match;\n    while ((match = regex.exec(viewport.content))) {\n      properties[match[1]] = match[2];\n    }\n    var width = Number.parseFloat(properties.width);\n    var height = Number.parseFloat(properties.height);\n    if (width && height) {\n      _pageSize = { width: width, height: height };\n      layoutPage();\n    }\n  }\n\n  // Layouts the page iframe to center its content and scale it to fill the available viewport.\n  function layoutPage() {\n    if (!_pageSize || !_viewportSize || !_safeAreaInsets) {\n      return;\n    }\n\n    _iframe.style.width = _pageSize.width + \"px\";\n    _iframe.style.height = _pageSize.height + \"px\";\n    _iframe.style.marginTop =\n      _safeAreaInsets.top - _safeAreaInsets.bottom + \"px\";\n    _iframe.style.marginLeft =\n      _safeAreaInsets.left - _safeAreaInsets.right + \"px\";\n\n    // Calculates the zoom scale required to fit the content to the viewport.\n    var widthRatio = _viewportSize.width / _pageSize.width;\n    var heightRatio = _viewportSize.height / _pageSize.height;\n    var scale = Math.min(widthRatio, heightRatio);\n\n    // Sets the viewport of the wrapper page (this page) to scale the iframe.\n    var viewport = document.querySelector(\"meta[name=viewport]\");\n    viewport.content = \"initial-scale=\" + scale + \", minimum-scale=\" + scale;\n  }\n\n  return {\n    // Returns whether the page is currently loading its contents.\n    isLoading: false,\n\n    // Link object for the resource currently loaded in the page.\n    link: null,\n\n    // Loads the given resource ({link, url}) in the page.\n    load: function (resource, completion) {\n      if (!resource.link || !resource.url) {\n        if (completion) {\n          completion();\n        }\n        return;\n      }\n\n      var page = this;\n      page.link = resource.link;\n      page.isLoading = true;\n\n      function loaded() {\n        _iframe.removeEventListener(\"load\", loaded);\n\n        // Waiting for the next animation frame seems to do the trick to make sure the page is fully rendered.\n        _iframe.contentWindow.requestAnimationFrame(function () {\n          page.isLoading = false;\n          _iframe.contentWindow.eval(\n            `readium.link = ${JSON.stringify(resource.link)};`\n          );\n          if (completion) {\n            completion();\n          }\n        });\n      }\n\n      _iframe.addEventListener(\"load\", loaded);\n      _iframe.src = resource.url;\n    },\n\n    // Resets the page and empty its contents.\n    reset: function () {\n      if (!this.link) {\n        return;\n      }\n      this.link = null;\n      _pageSize = null;\n      _iframe.src = \"about:blank\";\n    },\n\n    // Evaluates a script in the context of the page.\n    eval: function (script) {\n      if (!this.link || this.isLoading) {\n        return;\n      }\n      return _iframe.contentWindow.eval(script);\n    },\n\n    // Updates the available viewport to display the resource.\n    setViewport: function (viewportSize, safeAreaInsets) {\n      _viewportSize = viewportSize;\n      _safeAreaInsets = safeAreaInsets;\n      layoutPage();\n    },\n\n    // Shows the page's viewport.\n    show: function () {\n      _viewport.style.display = \"block\";\n    },\n\n    // Hides the page's viewport.\n    hide: function () {\n      _viewport.style.display = \"none\";\n    },\n  };\n};\n"],"names":[],"sourceRoot":""}